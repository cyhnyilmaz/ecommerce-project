import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.network.*
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.bmuschko.docker-remote-api' version '9.2.1'
}

group = 'com.pttem'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


String appDockerImageName = "pttem/eureka-server"

task dockerRemoveEurekaImage(type: DockerRemoveImage) {
	group = "eureka server build"
	description = "Removes Eureka server docker image"
	targetImageId { appDockerImageName }
	onError {
		System.out.println("No previous image to delete")
	}
}

task dockerBuildEurekaImage(type: DockerBuildImage, dependsOn: [dockerRemoveEurekaImage]) {
	group = "eureka server build"
	description = "Creates Eureka server docker image. It removes any previous images, creates a deployable Spring Boot jar file and bundles everything in a docker image"
	doFirst {
		println 'Starting copy for Dockerfile...'
		copy {
			from './Dockerfile'
			into 'build/libs'
		}
		println 'Starting copy for config files...'
	}
	description = "Builds ${appDockerImageName} docker image."
	inputDir.set(file('build/libs'))
	images.add(appDockerImageName)
}
